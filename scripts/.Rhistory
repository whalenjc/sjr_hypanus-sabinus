library(rfishbase)
get_family_name <- function(species_name) {
species_data <- species(species_name, fields = "Family")
if (!is.null(species_data) && !is.na(species_data$Family[1])) {
return(species_data$Family[1])
} else {
return(NA)
}
}
data$family <- sapply(data$identification, get_family_name)
# get family name
library(rfishbase)
get_family_name <- function(species_name) {
species_data <- species(species_name)
# Check if the "Family" column exists in species_data and it's not NULL
if ("Family" %in% colnames(species_data) && !is.na(species_data$Family[1])) {
return(species_data$Family[1])
} else {
return(NA)
}
}
data$family <- sapply(data$identification, get_family_name)
head(data$identification, 10)
test_species <- data$identification[1] # Taking the first species name for a test
species_info <- species(test_species)
print(species_info)
View(species_info)
print(species_info$Family)
# get family name from rfishbase
# Sample dataframe
data.test <- data.frame(identification = c("Pomatomus saltatrix", "Scomber scombrus"))
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
species_info <- species(scientific_name)
if (nrow(species_info) > 0) {
return(species_info$FamName)
} else {
return(NA)
}
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data.test$family <- sapply(data$identification, get_family_name)
dlass(data$identification)
class(data$identification)
# taxize
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_info <- classification(scientific_name, db = "ncbi")
if (!is.null(tax_info)) {
family_name <- tax_info[[1]]$Family
if (!is.null(family_name)) {
return(family_name)
}
}
return(NA)
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
# taxize
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_info <- get_taxa(scientific_name, db = "ncbi", rank = "family")
if (!is.null(tax_info) && length(tax_info) > 0) {
return(tax_info[[1]])
} else {
return(NA)
}
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
# taxize
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_id <- get_taxid(scientific_name, db = "ncbi")
if (!is.null(tax_id) && length(tax_id) > 0) {
family_name <- get_tax_name(tax_id, rank = "family", db = "ncbi")
return(family_name)
} else {
return(NA)
}
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
# taxize
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_id <- get_ids(scientific_name, db = "ncbi", rank = "species")
if (!is.null(tax_id) && length(tax_id) > 0) {
tax_info <- classification(tax_id, db = "ncbi")
family_name <- tax_info$family[1]
return(family_name)
} else {
return(NA)
}
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
library(taxize)
# taxize
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_id <- get_ids(scientific_name, db = "ncbi", rank = "species")
if (!is.null(tax_id) && length(tax_id) > 0) {
tax_info <- classification(tax_id, db = "ncbi")
family_name <- tax_info$family[1]
return(family_name)
} else {
return(NA)
}
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
# taxize
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_id <- get_uid(scientific_name)
if (!is.null(tax_id) && length(tax_id) > 0) {
tax_info <- classification(tax_id[[1]])
if ("family" %in% names(tax_info)) {
family_name <- tax_info$family[1]
return(family_name)
}
}
return(NA)
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
use_entrez(5ba4403576b9a39707d3711d4a9fc3b2c208)
use_entrez("5ba4403576b9a39707d3711d4a9fc3b2c208")
use_entrez(5ba4403576b9a39707d3711d4a9fc3b2c208)
use_entrez("5ba4403576b9a39707d3711d4a9fc3b2c208")
options(taxize_entrez_key = "5ba4403576b9a39707d3711d4a9fc3b2c208")
# taxize
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_id <- get_uid(scientific_name)
if (!is.null(tax_id) && length(tax_id) > 0) {
tax_info <- classification(tax_id[[1]])
if ("family" %in% names(tax_info)) {
family_name <- tax_info$family[1]
return(family_name)
}
}
return(NA)
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
# taxize
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_id <- get_uid(scientific_name)
if (!is.null(tax_id) && length(tax_id) > 0) {
tax_info <- classification(tax_id[[1]], db = "ncbi")
if ("family" %in% names(tax_info)) {
family_name <- tax_info$family[1]
return(family_name)
}
}
return(NA)
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
# taxize
taxize::use_entrez("5ba4403576b9a39707d3711d4a9fc3b2c208")
# taxize
Sys.setenv(ENTREZ_KEY = "5ba4403576b9a39707d3711d4a9fc3b2c208")
# Function to get family name based on scientific name
get_family_name <- function(scientific_name) {
tax_id <- get_uid(scientific_name)
if (!is.null(tax_id) && length(tax_id) > 0) {
tax_info <- classification(tax_id[[1]], db = "ncbi")
if ("family" %in% names(tax_info)) {
family_name <- tax_info$family[1]
return(family_name)
}
}
return(NA)
}
# Apply the function to the 'identification' column and store the result in the 'family' column
data$family <- sapply(data$identification, get_family_name)
# for John
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#### PACKAGES ####
packages_used <-
c("rfishbase",
"readxl",
"ggplot2")
packages_to_install <-
packages_used[!packages_used %in% installed.packages()[,1]]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install,
Ncpus = Sys.getenv("NUMBER_OF_PROCESSORS") - 1)
}
lapply(packages_used,
require,
character.only = TRUE)
# Uses the relative path from the sjr_hypanus-sabinus/scripts/ directory where this R file is located.
sjr<- read_excel("../data/SJR_Sabina_All_Data.xlsx")
View(sjr)
head(sjr)
#### PACKAGES ####
packages_used <-
c("rfishbase",
"dplyr",
"lubridate",
"readxl",
"ggplot2")
packages_to_install <-
packages_used[!packages_used %in% installed.packages()[,1]]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install,
Ncpus = Sys.getenv("NUMBER_OF_PROCESSORS") - 1)
}
lapply(packages_used,
require,
character.only = TRUE)
# Replace numbers with site IDs
site_map <- setNames(c("GA", "MR", "NR", "JR", "LG", "LM", "LJ"), 1:7)
sjr <- sjr %>%
mutate(Site = factor(Site, levels = 1:7, labels = c("GA", "MR", "NR", "JR", "LG", "LM", "LJ")))
# Extract year from Date column
sjr <- sjr %>%
mutate(Year = if_else(is.na(Date), 2002, year(Date)))
# Create site_id column combining site code and year
sjr <- sjr %>%
mutate(site_id = paste(Site, Year, sep = "-"))
# View the updated dataset
head(sjr)
# Continue from the previous transformation
sjr <- sjr %>%
mutate(site_id_new_old = case_when(
Year == 2002 ~ paste(Site, "old", sep = "_"),
Year >= 2014 & Year <= 2016 ~ paste(Site, "new", sep = "_"),
TRUE ~ paste(Site, "other", sep = "_")  # You can specify what to do with other years or leave it out
))
# View the updated dataset
head(sjr)
# Prepare data by removing any NA values for PCA
sjr_clean <- sjr %>%
select(CYP, GST, UGT, NPH, PYR, BaP, LPO) %>%
na.omit()  # Adjust this step as needed, e.g., using imputation instead of omitting
# Perform PCA
pca_result <- prcomp(sjr_clean, scale. = TRUE)  # Scale the data for PCA
# Prepare a data frame for plotting
pca_data <- data.frame(Score1 = pca_result$x[,1], Score2 = pca_result$x[,2]) %>%
bind_cols(sjr %>% select(site_id_new_old)) %>%
na.omit()  # Ensure there are no missing values in site_id_new_old
# First, let's create a clean dataset including the site_id_new_old for PCA
sjr_clean <- sjr %>%
select(CYP, GST, UGT, NPH, PYR, BaP, LPO, site_id_new_old) %>%
na.omit()  # This now also omits any rows with NA in 'site_id_new_old'
# Now perform PCA on just the biomarker data
pca_result <- prcomp(sjr_clean[,1:7], scale. = TRUE)  # Select only the biomarker columns, now that site_id_new_old is column 8
# Prepare a data frame for plotting, using the PCA scores and site_id_new_old which have the same number of rows now
pca_data <- data.frame(Score1 = pca_result$x[,1], Score2 = pca_result$x[,2], site_id_new_old = sjr_clean$site_id_new_old)
# Plotting the PCA results
ggplot(pca_data, aes(x = Score1, y = Score2, color = site_id_new_old)) +
geom_point(alpha = 0.8, size = 3) +
labs(title = "PCA of Biomarkers", x = "PC1", y = "PC2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Display the plot
print(ggplot_object)
# Assume pca_data is already prepared with PCA scores and site_id_new_old
# Continue to plot PCA results with ellipses
ggplot_object <- ggplot(pca_data, aes(x = Score1, y = Score2, color = site_id_new_old)) +
geom_point(alpha = 0.8, size = 3) +
stat_ellipse(type = "t", linetype = 2, level = 0.95) +  # Draws ellipses
labs(title = "PCA of Biomarkers", x = "PC1", y = "PC2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Plot eigenvectors
loadings <- pca_result$rotation[, 1:2]  # Get the loadings for PC1 and PC2
ggplot_object <- ggplot_object +
geom_segment(aes(x = 0, y = 0, xend = loadings[,"PC1"] * max(abs(pca_data$Score1)),
yend = loadings[,"PC2"] * max(abs(pca_data$Score2)), color = "black"),
arrow = arrow(length = unit(0.5, "cm")), alpha = 0.75) +
geom_text_repel(aes(x = loadings[,"PC1"] * max(abs(pca_data$Score1)),
y = loadings[,"PC2"] * max(abs(pca_data$Score2)),
label = rownames(loadings)), size = 4)
#### PACKAGES ####
packages_used <-
c("rfishbase",
"ggrepel",
"ggfortify",
"dplyr",
"lubridate",
"readxl",
"ggplot2")
packages_to_install <-
packages_used[!packages_used %in% installed.packages()[,1]]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install,
Ncpus = Sys.getenv("NUMBER_OF_PROCESSORS") - 1)
}
lapply(packages_used,
require,
character.only = TRUE)
# Assume pca_data is already prepared with PCA scores and site_id_new_old
# Continue to plot PCA results with ellipses
ggplot_object <- ggplot(pca_data, aes(x = Score1, y = Score2, color = site_id_new_old)) +
geom_point(alpha = 0.8, size = 3) +
stat_ellipse(type = "t", linetype = 2, level = 0.95) +  # Draws ellipses
labs(title = "PCA of Biomarkers", x = "PC1", y = "PC2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Plot eigenvectors
loadings <- pca_result$rotation[, 1:2]  # Get the loadings for PC1 and PC2
ggplot_object <- ggplot_object +
geom_segment(aes(x = 0, y = 0, xend = loadings[,"PC1"] * max(abs(pca_data$Score1)),
yend = loadings[,"PC2"] * max(abs(pca_data$Score2)), color = "black"),
arrow = arrow(length = unit(0.5, "cm")), alpha = 0.75) +
geom_text_repel(aes(x = loadings[,"PC1"] * max(abs(pca_data$Score1)),
y = loadings[,"PC2"] * max(abs(pca_data$Score2)),
label = rownames(loadings)), size = 4)
# Display the plot
print(ggplot_object)
rlang::last_trace()
# Assuming all previous steps and data preparations are correct
# Update the ggplot object
ggplot_object <- ggplot(pca_data, aes(x = Score1, y = Score2, color = site_id_new_old)) +
geom_point(alpha = 0.8, size = 3) +
stat_ellipse(type = "t", linetype = 2, level = 0.95) +  # Draws ellipses
labs(title = "PCA of Biomarkers", x = "PC1", y = "PC2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Maximum absolute scores for scaling vectors properly
max_score1 <- max(abs(pca_data$Score1))
max_score2 <- max(abs(pca_data$Score2))
# Add eigenvectors and labels
ggplot_object <- ggplot_object +
geom_segment(aes(x = 0, y = 0, xend = loadings[,"PC1"] * max_score1,
yend = loadings[,"PC2"] * max_score2),
arrow = arrow(length = unit(0.5, "cm")), color = "black", alpha = 0.75) +
geom_text_repel(aes(x = loadings[,"PC1"] * max_score1,
y = loadings[,"PC2"] * max_score2,
label = rownames(loadings)), size = 4)
# Display the plot
print(ggplot_object)
rlang::last_trace()
# Assuming all previous steps and data preparations are correct
# Adjusted plotting code
ggplot_object <- ggplot(pca_data, aes(x = Score1, y = Score2, color = site_id_new_old)) +
geom_point(alpha = 0.8, size = 3) +
stat_ellipse(type = "t", linetype = 2, level = 0.95) +  # Draws ellipses
labs(title = "PCA of Biomarkers", x = "PC1", y = "PC2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Maximum scores for proper scaling
max_score1 <- max(abs(pca_data$Score1))
max_score2 <- max(abs(pca_data$Score2))
# Add eigenvectors as arrows
for (i in 1:nrow(loadings)) {
ggplot_object <- ggplot_object +
geom_segment(aes(x = 0, y = 0),
xend = loadings[i, "PC1"] * max_score1,
yend = loadings[i, "PC2"] * max_score2,
arrow = arrow(length = unit(0.5, "cm")),
color = "black", alpha = 0.75) +
geom_text_repel(aes(x = loadings[i, "PC1"] * max_score1 * 1.1,
y = loadings[i, "PC2"] * max_score2 * 1.1,
label = rownames(loadings)[i]),
size = 4, color = "black")
}
# Display the plot
print(ggplot_object)
# Add eigenvectors as arrows
for (i in 1:nrow(loadings)) {
ggplot_object <- ggplot_object +
geom_segment(aes(x = 0, y = 0),
xend = loadings[i, "PC1"] * max_score1,
yend = loadings[i, "PC2"] * max_score2,
arrow = arrow(length = unit(0.5, "cm")),
color = "black", alpha = 0.75) +
geom_text_repel(aes(x = loadings[i, "PC1"] * max_score1 * 1.1,
y = loadings[i, "PC2"] * max_score2 * 1.1,
label = rownames(loadings)[i]),
size = 4, color = "black", nudge_x = 0.05, nudge_y = 0.05)
}
# Display the plot
print(ggplot_object)
#### PACKAGES ####
packages_used <-
c("rfishbase",
"vegan",
"stats",
"ggrepel",
"ggfortify",
"dplyr",
"lubridate",
"readxl",
"ggplot2")
packages_to_install <-
packages_used[!packages_used %in% installed.packages()[,1]]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install,
Ncpus = Sys.getenv("NUMBER_OF_PROCESSORS") - 1)
}
lapply(packages_used,
require,
character.only = TRUE)
# Add eigenvectors as arrows
for (i in 1:nrow(loadings)) {
ggplot_object <- ggplot_object +
geom_segment(aes(x = 0, y = 0),
xend = loadings[i, "PC1"] * max_score1,
yend = loadings[i, "PC2"] * max_score2,
arrow = arrow(length = unit(0.5, "cm")),
color = "black", alpha = 0.75) +
geom_text_repel(aes(x = loadings[i, "PC1"] * max_score1 * 1.1,
y = loadings[i, "PC2"] * max_score2 * 1.1,
label = rownames(loadings)[i]),
size = 10, color = "black", nudge_x = 0.05, nudge_y = 0.05)
}
# Display the plot
print(ggplot_object)
### MDS & nMDS
# Display the plot
print(ggplot_object)
### MDS & nMDS
# Assuming sjr_clean is preprocessed data including only numeric columns of biomarkers
dist_matrix <- dist(sjr_clean[, 1:7], method = "euclidean")  # Calculate Euclidean distance matrix
# Perform MDS
mds_result <- cmdscale(dist_matrix, k = 2)  # k is the number of dimensions
# Perform nMDS
nmds_result <- metaMDS(dist_matrix, k = 2, trymax = 20)  # Using vegan package, trymax increases attempts for convergence
# Plot MDS
plot(mds_result, main = "MDS Plot", type = 'n')
text(mds_result, labels = sjr_clean$site_id_new_old, cex = 0.8)
# Plot nMDS
plot(nmds_result$points, main = "nMDS Plot", type = 'n')
text(nmds_result$points, labels = sjr_clean$site_id_new_old, cex = 0.8)
# Assuming sjr_clean includes the site_id_new_old and numeric biomarkers
dist_matrix <- dist(sjr_clean[, 1:7], method = "euclidean")  # Calculate Euclidean distance matrix
# Perform MDS
mds_result <- cmdscale(dist_matrix, k = 2)  # k is the number of dimensions
mds_df <- data.frame(X1 = mds_result[, 1], X2 = mds_result[, 2], Group = sjr_clean$site_id_new_old)
# Perform nMDS
nmds_result <- metaMDS(dist_matrix, k = 2, trymax = 20)  # Using vegan package
nmds_df <- data.frame(X1 = nmds_result$points[, 1], X2 = nmds_result$points[, 2], Group = sjr_clean$site_id_new_old)
# Plot MDS with ggplot2
mds_plot <- ggplot(mds_df, aes(x = X1, y = X2, color = Group)) +
geom_point(alpha = 0.8, size = 3) +
ggtitle("MDS Plot") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Plot nMDS with ggplot2
nmds_plot <- ggplot(nmds_df, aes(x = X1, y = X2, color = Group)) +
geom_point(alpha = 0.8, size = 3) +
ggtitle("nMDS Plot") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Display the plots
print(mds_plot)
print(nmds_plot)
#### PACKAGES ####
packages_used <-
c("rfishbase",
"ggforce",
"vegan",
"stats",
"ggrepel",
"ggfortify",
"dplyr",
"lubridate",
"readxl",
"ggplot2")
packages_to_install <-
packages_used[!packages_used %in% installed.packages()[,1]]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install,
Ncpus = Sys.getenv("NUMBER_OF_PROCESSORS") - 1)
}
lapply(packages_used,
require,
character.only = TRUE)
# Assuming mds_df and nmds_df are already created with 'Group' column
# Plot MDS with ellipses
mds_plot <- ggplot(mds_df, aes(x = X1, y = X2, color = Group)) +
geom_point(alpha = 0.8, size = 3) +
geom_mark_ellipse(aes(fill = Group, color = Group), show.legend = FALSE, alpha = 0.2) +
ggtitle("MDS Plot with Ellipses") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Plot nMDS with ellipses
nmds_plot <- ggplot(nmds_df, aes(x = X1, y = X2, color = Group)) +
geom_point(alpha = 0.8, size = 3) +
geom_mark_ellipse(aes(fill = Group, color = Group), show.legend = FALSE, alpha = 0.2) +
ggtitle("nMDS Plot with Ellipses") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Display the plots
print(mds_plot)
print(nmds_plot)
# Plot nMDS with ellipses
nmds_plot <- ggplot(nmds_df, aes(x = X1, y = X2, color = Group)) +
geom_point(alpha = 0.8, size = 3) +
geom_mark_ellipse(aes(color = Group), show.legend = FALSE, alpha = 0.2) +
ggtitle("nMDS Plot with Ellipses") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
print(nmds_plot)
# Assuming mds_df and nmds_df are already created with 'Group' column
# Plot MDS with ellipses
mds_plot <- ggplot(mds_df, aes(x = X1, y = X2, color = Group)) +
geom_point(alpha = 0.8, size = 3) +
geom_mark_ellipse(aes(color = Group), show.legend = FALSE, alpha = 0.2) +
ggtitle("MDS Plot with Ellipses") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Display the plots
print(mds_plot)
